(*
  Copyright (C) iNuron - info@openvstorage.com
  This file is part of Open vStorage. For license information, see <LICENSE.txt>
*)


module Lwt_bytes = struct
  include Lwt_bytes

  let show (t:t) =
    let l = Lwt_bytes.length t in
    if l < 60
    then Printf.sprintf "<Lwt_bytes: length=%i %S>" l (to_string t)
    else Printf.sprintf "<Lwt_bytes: length=%i _ >" l


  let pp formatter t =
    Format.pp_print_string formatter (show t)

  let raw_address (t : t) =
    let open Ctypes in
    let x = bigarray_start array1 t in
    raw_address_of_ptr (to_voidp x)

  let unsafe_destroy ?msg (t : t) =
    let l = Lwt_bytes.length t in
    let address = raw_address t in
    Lwt_log.ign_debug_f ">>> unsafe_destroy %i bytes @ %nX -- %S <<<"
                        l address
                        (match msg with
                          | Some msg -> msg
                          | None -> Printexc.get_callstack 5 |> Printexc.raw_backtrace_to_string);
    Core_kernel.Bigstring.unsafe_destroy t

  let create_random size =
    let r = Lwt_bytes.create size in
    for i = 0 to size - 1 do
      Lwt_bytes.unsafe_set r i (Random.int 256 |> Char.chr)
    done;
    r

  let lwt_unix_fd_to_fd
        (fd : Lwt_unix.file_descr) : int =
    Obj.magic (Obj.field (Obj.repr fd) 0)

  let read_and_log fd buf pos len =
    let org_address = raw_address buf in
    Lwt.finalize
      (fun () -> read fd buf pos len)
      (fun () ->
        if (raw_address buf) <> org_address
        then
          Lwt_log.ign_error_f ">>> read_and_log fd %i : buf @%nX (org: %nX) [%i bytes] pos: %i len: %i DONE <<<"
                              (lwt_unix_fd_to_fd fd) (raw_address buf) org_address (Lwt_bytes.length buf) pos len;
        if (raw_address buf) = Nativeint.zero
        then
          begin
            Lwt_log.ign_error_f "+++ HOLD IT--- NULL BUFFER DETECTED !! org_address: %nX +++" org_address;
            Lwt_io.printf "%!" |> Lwt.ignore_result;
            Lwt_io.eprintf "%!" |> Lwt.ignore_result;
            exit (-1);
          end;

          Lwt.return_unit)

end

module ProdSharedBuffer = struct
  type t = { b : Lwt_bytes.t ; mutable ref_count : int}

  let make_shared b = { b ; ref_count = 1}

  let create len = Lwt_bytes.create len |> make_shared

  let length t = Lwt_bytes.length t.b

  let register_sharing ?(n=1) t = t.ref_count <- t.ref_count + n
  let unregister_usage t =
    let ref_count' = t.ref_count -1 in
    let () = t.ref_count <- ref_count' in
    if ref_count' = 0
    then
      Lwt_bytes.unsafe_destroy t.b

  let deref t = t.b
  let refcnt t = t.ref_count

  let of_string s = Lwt_bytes.of_string s |> make_shared

  let to_string t = Lwt_bytes.to_string t.b
end


module TestSharedBuffer = struct
  type t = { b : Lwt_bytes.t ;
             mutable ref_count : int;
             from_where: string;
           }

  let when_collected b =
    if b.ref_count != 0
    then
      let () = Printf.printf
                 "HIERE!\nref_count=%i size=%i from_where:%s\n%!"
                 b.ref_count
                 (Lwt_bytes.length b.b)
                 (b.from_where)
      in
      exit (-1)

  let make_shared b =
    let from_where =
      Printexc.get_callstack 40 |> Printexc.raw_backtrace_to_string
    in
    let r = { b ; ref_count = 1; from_where; } in
    let () = Gc.finalise when_collected r in
    Lwt_log.ign_debug_f ">>> TestSharedBuffer MAKE_SHARED %i bytes @ %nX (%S) <<<"
                        (Lwt_bytes.length b) (Lwt_bytes.raw_address b)
                        (Printexc.get_callstack 5 |> Printexc.raw_backtrace_to_string);
    r

  let create len = Lwt_bytes.create len |> make_shared

  let length t = Lwt_bytes.length t.b

  let register_sharing ?(n=1) t =
    let () = Lwt_log.ign_debug_f ">>> TestSharedBuffer REGISTER_SHARING %i bytes @ %nX -- n=%i ref_count %i -> %i (%S) <<<"
                                 (Lwt_bytes.length t.b) (Lwt_bytes.raw_address t.b) n t.ref_count (t.ref_count + n)
                                 (Printexc.get_callstack 5 |> Printexc.raw_backtrace_to_string)
             in
    t.ref_count <- t.ref_count + n

  let unregister_usage t =
    let ref_count' = t.ref_count -1 in
    let () = t.ref_count <- ref_count' in
    Lwt_log.ign_debug_f ">>> TestSharedBuffer UNREGISTER_USAGE %i bytes @ %nX -- ref_count %i (%S) <<<"
                        (Lwt_bytes.length t.b) (Lwt_bytes.raw_address t.b) ref_count'
                        (Printexc.get_callstack 5 |> Printexc.raw_backtrace_to_string);
    if ref_count' = 0
    then Lwt_bytes.unsafe_destroy ~msg:"TestSharedBuffer UNSAFE_DESTROY" t.b

  let deref t = t.b
  let refcnt t = t.ref_count

  let of_string s = Lwt_bytes.of_string s |> make_shared

  let to_string t = Lwt_bytes.to_string t.b
end

module SharedBuffer =
#ifdef ALBA_TEST
TestSharedBuffer
#else
ProdSharedBuffer
#endif
